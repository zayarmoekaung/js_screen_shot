
var head = document.getElementsByTagName('head')[0];
var b_head = document.createComment("head");
b_head.innerHTML =  document.getElementsByTagName('head')[0].innerHTML;
var b_body = document.createElement("body");
b_body.innerHTML = document.body.innerHTML;
if (typeof loading == 'undefined') {
window.loading = document.createElement("section");
loading.id = 'loading';
loading.innerHTML = `
<style  type="text/css">
    /* CSS code */
#loading-icon {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(255, 255, 255, 0.5); /* semi-transparent white background */
  z-index: 9999; /* make sure it's on top of everything else */
  
}
#loading-icon_img {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); /* center the image vertically and horizontally */
}

</style>
<style type="text/css">
@keyframes ldio-q2u7tmwe2pk {
  0% { opacity: 1 }
  100% { opacity: 0 }
}
.ldio-q2u7tmwe2pk div {
  left: 94px;
  top: 48px;
  position: absolute;
  animation: ldio-q2u7tmwe2pk linear 1s infinite;
  background: #fe718d;
  width: 12px;
  height: 24px;
  border-radius: 6px / 12px;
  transform-origin: 6px 52px;
}.ldio-q2u7tmwe2pk div:nth-child(1) {
  transform: rotate(0deg);
  animation-delay: -0.9166666666666666s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(2) {
  transform: rotate(30deg);
  animation-delay: -0.8333333333333334s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(3) {
  transform: rotate(60deg);
  animation-delay: -0.75s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(4) {
  transform: rotate(90deg);
  animation-delay: -0.6666666666666666s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(5) {
  transform: rotate(120deg);
  animation-delay: -0.5833333333333334s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(6) {
  transform: rotate(150deg);
  animation-delay: -0.5s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(7) {
  transform: rotate(180deg);
  animation-delay: -0.4166666666666667s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(8) {
  transform: rotate(210deg);
  animation-delay: -0.3333333333333333s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(9) {
  transform: rotate(240deg);
  animation-delay: -0.25s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(10) {
  transform: rotate(270deg);
  animation-delay: -0.16666666666666666s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(11) {
  transform: rotate(300deg);
  animation-delay: -0.08333333333333333s;
  background: #fe718d;
}.ldio-q2u7tmwe2pk div:nth-child(12) {
  transform: rotate(330deg);
  animation-delay: 0s;
  background: #fe718d;
}
.loadingio-spinner-spinner-ft6dx5hk6 {
  width: 200px;
  height: 200px;
  display: inline-block;
  overflow: hidden;
  top: 50%;
  left: 50%;
  
  
}
.ldio-q2u7tmwe2pk {
  width: 100%;
  height: 100%;
  position: relative;
  transform: translateZ(0) scale(1);
  backface-visibility: hidden;
  transform-origin: 0 0; /* see note above */
}
.ldio-q2u7tmwe2pk div { box-sizing: content-box; }
/* generated by https://loading.io/ */
</style>
<div id="loading-icon">
<div id="loading-icon_img">

<div class="loadingio-spinner-spinner-ft6dx5hk6"><div class="ldio-q2u7tmwe2pk">
<div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div>
</div></div>
</div>

</div>

`;
}
document.body.appendChild(loading);
    if (typeof script2 == 'undefined') {
        window.script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = "https://cdn.jsdelivr.net/gh/zayarmoekaung/js_screen_shot/dist/html2canvas.min.js";
    window.script2 = document.createElement('script');
    script2.type = 'text/javascript';
    script2.src = "https://cdn.jsdelivr.net/gh/zayarmoekaung/js_screen_shot/dist/FileSaver.js";
   
    window.st = document.createElement("link");
    st.rel = "stylesheet";
    st.type = 'text/css';
    st.href=  "https://cdn.jsdelivr.net/gh/zayarmoekaung/js_screen_shot/dist/screenshot.css";
    st.media = 'all';
    console.log('loaded');
    script.onreadystatechange = takeScreenshot;
    script.onload = takeScreenshot;

    }else{
        takeScreenshot();
    }
   
    // Fire the loading
    head.appendChild(script);
    head.appendChild(script2);
    head.appendChild(st);

   
   if (typeof startX != 'undefined' ) {
     window.startX, window.startY, window.endX, window.endY;
   }
    var canvas = document.createElement('canvas');
    var canvas2 = document.createElement('canvas');
    
    function takeScreenshot() {
      
        // Get the whole body element
        const body = document.body;

        // Define an array of selectors for the elements to ignore
        const ignoreSelectors = ['#loading'];
        
        // Use html2canvas to take a screenshot of the body element, excluding the elements to ignore
        html2canvas(body, {
          ignoreElements: (element) => {
            // Check if the element matches any of the ignore selectors
            return ignoreSelectors.some((selector) => element.matches(selector));
          }
        }).then(canvas => {
          // Convert the canvas to a data URL and create an image element
          const dataUrl = canvas.toDataURL();
          crop(dataUrl);
         
        });
        
       
      
      }
      function crop(src) {
        const body = document.body;
        const img = new Image();
        img.onload = function() {
          // Create a canvas element and set its dimensions
          canvas.width = body.offsetWidth + body.style.margin;
          canvas.height = body.offsetHeight;
          canvas2.width = body.offsetWidth + body.style.margin;
          canvas2.height = body.offsetHeight;
      
          // Get the canvas context and draw the image onto the canvas
          const ctx = canvas.getContext('2d');
          const ctx2 = canvas2.getContext('2d');
          ctx2.fillStyle = 'rgba(0, 0, 0, 0.5)';
          ctx2.fillRect(0, 0, canvas2.width, canvas2.height);
          ctx2.stroke();
          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
          
          canvas.addEventListener('mousedown', handleMouseDown);
          window.addEventListener('mouseup', handleMouseUp);
          var box = document.createElement("div");
          var shadow = document.createElement("div");
          shadow.classList.add("overlay");
          box.classList.add("main_cav");
          box.appendChild(canvas);
          shadow.appendChild(canvas2);
          body.appendChild(box);
          body.appendChild(shadow);
          loading.remove();
        }
        img.src = src;
      }
      function drawSelectionRect(x, y, width, height) {
       width = width -x ;
       height = height -y;
        const ctx = canvas2.getContext('2d');

        // Save the current canvas state
        ctx.save();
      
        // Draw the selected area as a semi-transparent black rectangle
        ctx.clearRect(0, 0, canvas2.width, canvas2.height);
        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
        ctx.fillRect(0, 0, canvas2.width, canvas2.height);
        ctx.clearRect(x, y, width, height);
        
        // Draw a border around the selected area
        ctx.strokeStyle = '#ffffff';
        ctx.lineWidth = 2;
        ctx.strokeRect(x + 1, y + 1, width - 2, height - 2);
      
        // Restore the canvas state
        ctx.restore();
      }
      
      function handleMouseDown(e) {
        // Store the starting coordinates of the selection rectangle
        startX = e.clientX + window.pageXOffset - canvas.offsetLeft;
        startY = e.clientY + window.pageYOffset - canvas.offsetTop;
       
        // Add event listeners to track the mouse movements
        canvas.addEventListener('mousemove', handleMouseMove);
        window.addEventListener('mousemove', handleMouseMove);
    }
    
    function handleMouseMove(e) {
        // Update the ending coordinates of the selection rectangle
        endX = e.clientX + window.pageXOffset - canvas.offsetLeft;
        endY = e.clientY + window.pageYOffset - canvas.offsetTop;
       
        drawSelectionRect(startX, startY, endX, endY);
    }
      
      function handleMouseUp() {
        // Remove the event listeners for mouse movements
        canvas.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('mousemove', handleMouseMove);
      
        // Get the dimensions and position of the selection rectangle
        const width = Math.abs(endX - startX);
        const height = Math.abs(endY - startY);
        const x = Math.min(startX, endX);
        const y = Math.min(startY, endY);
      
        // Create a new canvas element with the dimensions of the selection rectangle
        const selectionCanvas = document.createElement('canvas');
        selectionCanvas.width = width;
        selectionCanvas.height = height;
      
        // Get the canvas context and draw the selected area onto the new canvas
        const selectionContext = selectionCanvas.getContext('2d');
        selectionContext.drawImage(canvas, x, y, width, height, 0, 0, width, height);
      
        // Convert the canvas to a data URL and create an image element
        const dataUrl = selectionCanvas.toDataURL();
        const image = new Image();
        image.onload = function() {
          // Save the image as a file using FileSaver.js
          //saveAs(dataUrl, 'cropped_image.png');
          popup(dataUrl);
        };
        image.src = dataUrl;
      }
      function popup(src){
        reset();
       
        let popup = `
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Screen Shot</title>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/zayarmoekaung/js_screen_shot/dist/screenshot.css">
            <script src="https://cdn.jsdelivr.net/gh/zayarmoekaung/js_screen_shot/dist/FileSaver.js"></script>
            <script src="https://cdn.jsdelivr.net/gh/zayarmoekaung/js_screen_shot/dist/util2.js"></script>
        </head>
        <body>
            <div>
                <img src="${src}" />
                <div>
               
                <button onclick='send("${src}")'>Send to server</button>
                <button onclick="closepop('overlay')">Cancel</button>
                
                </div>
                </div>
        </body>
        </html>
        `;
        var myWindow = window.open("", "_blank");
  myWindow.document.open();
  myWindow.document.write(popup);
  myWindow.document.close();
      }
      function getserver(src){
        let overlay = document.createElement("div");
        overlay.id="overlay"
        overlay.classList.add("overlay","pop_container","server_container");
        overlay.id="server";
        let inner = `
        <div>
        <input type="text" id="server_add" placeholder="server address"></input>
        <button onclick='send("${src}")'>Send</button>
        <button onclick="closeserver('server')">Cancel</button>
        </div>
        `;
        overlay.innerHTML=inner;
        document.body.appendChild(overlay);

      }
      function send(src){
        let text = '';
        let add = 'https://torijun.com/magic/';
        var data = new FormData();
        data.append("screenshot", src);
 
    // (B) UPLOAD SCREENSHOT TO SERVER
    fetch(add, { method:"post", body:data })
    .then(res => res.text())
    .then(txt => text=txt);
    if (text != '') {
        alert(text);
        reset()

    }else{
        alert("Server not responded");
        closeserver('server');
    }
  
      }
      function closeserver(id) {
        document.getElementById(id).remove();
       
       
      }
      function closepop(id) {
        document.getElementById(id).remove();
        canvas.addEventListener('mousedown', handleMouseDown);
        window.addEventListener('mouseup', handleMouseUp);
       
      }
      function saveAs(uri, filename) {
        const link = document.createElement('a');
        if (typeof link.download === 'string') {
          // Set the download attribute to the filename
          link.href = uri;
          link.download = filename;
      
          // Firefox requires the link to be in the body
          document.body.appendChild(link);
      
          // Simulate click
          link.click();
      
          // Remove the link when done
          body = document.body;
          body.removeChild(link);
          reset();
        } else {
          // If the download attribute is not supported, open the image in a new tab
          window.open(uri);
        }
      }
      function reset() {
        canvas.removeEventListener('mousedown', handleMouseDown);
        window.removeEventListener('mouseup', handleMouseUp);
        canvas.removeEventListener('mousemove', handleMouseMove);
        window.removeEventListener('mousemove', handleMouseMove);
        body = document.body;
        canvas.remove();
        canvas2.remove();
          
          head = document.getElementsByTagName('head')[0] ;
          head.innerHTML = b_head.innerHTML;
          
          var script = document.getElementById('screenshot');

// Remove the script element
script.parentNode.removeChild(script)
      }
      